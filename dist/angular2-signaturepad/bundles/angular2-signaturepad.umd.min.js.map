{"version":3,"sources":["../../../projects/angular2-signaturepad/src/lib/angular2-signaturepad.component.ts","../../../projects/angular2-signaturepad/src/lib/angular2-signaturepad.module.ts"],"names":["SignaturePad","elementRef","this","options","onBeginEvent","EventEmitter","onEndEvent","prototype","ngAfterContentInit","canvas","nativeElement","querySelector","canvasHeight","height","canvasWidth","width","signaturePad","SignaturePadNative.default","onBegin","bind","onEnd","ngOnDestroy","resizeCanvas","ratio","Math","max","window","devicePixelRatio","_canvas","offsetWidth","offsetHeight","getContext","scale","clear","toData","fromData","points","toDataURL","imageType","quality","fromDataURL","dataURL","hasOwnProperty","isEmpty","off","on","set","option","value","emit","queryPad","i0","ɵɵdirectiveInject","ElementRef","selectors","inputs","outputs","decls","vars","template","rf","ctx","i0.ɵɵelement","Component","selector","Input","Output","SignaturePadModule","imports","declarations","exports","NgModule"],"mappings":"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","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  OnDestroy,\n} from '@angular/core';\n\nimport * as SignaturePadNative from 'signature_pad';\n\nexport interface Point {\n  x: number;\n  y: number;\n  time: number;\n}\n\nexport type PointGroup = Array<Point>;\n\n@Component({\n  template: '<canvas></canvas>',\n  selector: 'signature-pad',\n})\nexport class SignaturePad implements AfterContentInit, OnDestroy {\n  @Input() public options: any;\n  @Output() public onBeginEvent: EventEmitter<boolean>;\n  @Output() public onEndEvent: EventEmitter<boolean>;\n\n  private signaturePad: any;\n  private elementRef: ElementRef;\n\n  constructor(elementRef: ElementRef) {\n    // no op\n    this.elementRef = elementRef;\n    this.options = this.options || {};\n    this.onBeginEvent = new EventEmitter();\n    this.onEndEvent = new EventEmitter();\n  }\n\n  public ngAfterContentInit(): void {\n    const canvas: any = this.elementRef.nativeElement.querySelector('canvas');\n\n    if ((this.options as any).canvasHeight) {\n      canvas.height = (this.options as any).canvasHeight;\n    }\n\n    if ((this.options as any).canvasWidth) {\n      canvas.width = (this.options as any).canvasWidth;\n    }\n\n    this.signaturePad = new SignaturePadNative.default(canvas, this.options);\n    this.signaturePad.onBegin = this.onBegin.bind(this);\n    this.signaturePad.onEnd = this.onEnd.bind(this);\n  }\n\n  public ngOnDestroy(): void {\n    const canvas: any = this.elementRef.nativeElement.querySelector('canvas');\n    canvas.width = 0;\n    canvas.height = 0;\n  }\n\n  public resizeCanvas(): void {\n    // When zoomed out to less than 100%, for some very strange reason,\n    // some browsers report devicePixelRatio as less than 1\n    // and only part of the canvas is cleared then.\n    const ratio: number = Math.max(window.devicePixelRatio || 1, 1);\n    const canvas: any = this.signaturePad._canvas;\n    canvas.width = canvas.offsetWidth * ratio;\n    canvas.height = canvas.offsetHeight * ratio;\n    canvas.getContext('2d').scale(ratio, ratio);\n    this.signaturePad.clear(); // otherwise isEmpty() might return incorrect value\n  }\n\n  // Returns signature image as an array of point groups\n  public toData(): Array<PointGroup> {\n    if (this.signaturePad) {\n      return this.signaturePad.toData();\n    } else {\n      return [];\n    }\n  }\n\n  // Draws signature image from an array of point groups\n  public fromData(points: Array<PointGroup>): void {\n    this.signaturePad.fromData(points as any);\n  }\n\n  // Returns signature image as data URL (see https://mdn.io/todataurl for the list of possible paramters)\n  public toDataURL(imageType?: string, quality?: number): string {\n    return this.signaturePad.toDataURL(imageType, quality); // save image as data URL\n  }\n\n  // Draws signature image from data URL\n  public fromDataURL(dataURL: string, options: any = {}): void {\n    // set default height and width on read data from URL\n    if (\n      !options.hasOwnProperty('height') &&\n      (this.options as any).canvasHeight\n    ) {\n      options.height = (this.options as any).canvasHeight;\n    }\n    if (!options.hasOwnProperty('width') && (this.options as any).canvasWidth) {\n      options.width = (this.options as any).canvasWidth;\n    }\n    this.signaturePad.fromDataURL(dataURL, options);\n  }\n\n  // Clears the canvas\n  public clear(): void {\n    this.signaturePad.clear();\n  }\n\n  // Returns true if canvas is empty, otherwise returns false\n  public isEmpty(): boolean {\n    return this.signaturePad.isEmpty();\n  }\n\n  // Unbinds all event handlers\n  public off(): void {\n    this.signaturePad.off();\n  }\n\n  // Rebinds all event handlers\n  public on(): void {\n    this.signaturePad.on();\n  }\n\n  // set an option on the signaturePad - e.g. set('minWidth', 50);\n  public set(option: string, value: any): void {\n    switch (option) {\n      case 'canvasHeight':\n        this.signaturePad._canvas.height = value;\n        break;\n      case 'canvasWidth':\n        this.signaturePad._canvas.width = value;\n        break;\n      default:\n        this.signaturePad[option] = value;\n    }\n  }\n\n  // notify subscribers on signature begin\n  public onBegin(): void {\n    this.onBeginEvent.emit(true);\n  }\n\n  // notify subscribers on signature end\n  public onEnd(): void {\n    this.onEndEvent.emit(true);\n  }\n\n  public queryPad(): any {\n    return this.signaturePad;\n  }\n}","import { NgModule } from '@angular/core';\nimport { SignaturePad } from './angular2-signaturepad.component';\n\n@NgModule({\n  declarations: [SignaturePad],\n  imports: [],\n  exports: [SignaturePad],\n})\nexport class SignaturePadModule {}\n"]}